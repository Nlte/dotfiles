# Class
snippet cclass "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet


# Guard
snippet cguard "header guard" b
#ifndef ${1:GUARD}_H_
#define $1_H_


#endif // $1_H_
endsnippet


# Gtest
snippet gtest "googletest"
TEST(${1:test}, ${2:name})
{
}
endsnippet


# Section delimiter comment
snippet csection "section delimiter comment"
/*
 * ${1:Section}
 */
endsnippet


# Arithmetic operators
snippet cclassarithmeticheader "class arthmetic operators"
${1:MyClass} operator+(const $1& i) const;
$1 operator-(const $1& i) const;
$1 operator*(const $1& i) const;
$1 operator+=(const $1& i);
$1 operator-=(const $1& i);
$1 operator*=(const $1& i);
endsnippet


snippet cclassarithmeticimpl "class arthmetic operators"
${1:MyClass} operator+(const $1& i) const
{
}

$1 operator-(const $1& i) const
{
}

$1 operator*(const $1& i) const
{
}

$1 operator+=(const $1& i)
{
}

$1 operator-=(const $1& i)
{
}

$1 operator*=(const $1& i)
{
}
endsnippet


snippet cruleoffive "cpp rule of five"
${1:MyClass}(const $1&) = default;
$1($1&&) = default;
$1& operator=(const $1&) = default;
$1& operator=($1&&) = default;
virtual ~$1() = default;
endsnippet
